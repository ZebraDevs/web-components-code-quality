{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "dist/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "dist/sourcemap-register.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/main.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "failedEmoji",
          "type": {
            "text": "string"
          },
          "default": "\"‚ùå\""
        },
        {
          "kind": "variable",
          "name": "passedEmoji",
          "type": {
            "text": "string"
          },
          "default": "\"‚úÖ\""
        },
        {
          "kind": "variable",
          "name": "detailsEmoji",
          "type": {
            "text": "string"
          },
          "default": "\"‚û°Ô∏è\""
        },
        {
          "kind": "variable",
          "name": "coverageUp",
          "type": {
            "text": "string"
          },
          "default": "\"üìà\""
        },
        {
          "kind": "variable",
          "name": "coverageDown",
          "type": {
            "text": "string"
          },
          "default": "\"üìâ\""
        },
        {
          "kind": "function",
          "name": "runBashCommand",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "command",
              "type": {
                "text": "string"
              },
              "description": "The Bash command to execute."
            }
          ],
          "description": "Executes a given Bash command and returns the output as a string."
        },
        {
          "kind": "function",
          "name": "runCommand",
          "return": {
            "type": {
              "text": "Promise<[StepResponse, string]>"
            }
          },
          "parameters": [
            {
              "name": "command",
              "type": {
                "text": "Command"
              },
              "description": "The command to be executed."
            }
          ],
          "description": "Executes a given command asynchronously and returns the response and output string."
        },
        {
          "kind": "function",
          "name": "buildComment",
          "return": {
            "type": {
              "text": "Promise<StepResponse>"
            }
          },
          "parameters": [
            {
              "name": "response",
              "type": {
                "text": "StepResponse"
              },
              "description": "The response object containing the error status and output."
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "A label to be included in the comment."
            },
            {
              "name": "outputStr",
              "optional": true,
              "type": {
                "text": "string"
              },
              "description": "An optional string to be included in the comment details."
            },
            {
              "name": "problemsCount",
              "optional": true,
              "type": {
                "text": "number"
              },
              "description": "An optional number representing the count of problems found."
            }
          ],
          "description": "Builds a comment based on the provided response, label, output string, and problems count."
        },
        {
          "kind": "function",
          "name": "commandComment",
          "return": {
            "type": {
              "text": "Promise<StepResponse>"
            }
          },
          "parameters": [
            {
              "name": "command",
              "type": {
                "text": "Command"
              },
              "description": "The command to be executed."
            }
          ],
          "description": "Executes a given command and builds a comment based on the command's response."
        },
        {
          "kind": "function",
          "name": "run",
          "return": {
            "type": {
              "text": "Promise<void>"
            }
          },
          "description": "Executes the main workflow for the project, including setting up dependencies,\nrunning static analysis, code formatting, tests, and updating changes in the\nGitHub repository."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "failedEmoji",
          "declaration": {
            "name": "failedEmoji",
            "module": "src/main.ts"
          }
        },
        {
          "kind": "js",
          "name": "passedEmoji",
          "declaration": {
            "name": "passedEmoji",
            "module": "src/main.ts"
          }
        },
        {
          "kind": "js",
          "name": "detailsEmoji",
          "declaration": {
            "name": "detailsEmoji",
            "module": "src/main.ts"
          }
        },
        {
          "kind": "js",
          "name": "coverageUp",
          "declaration": {
            "name": "coverageUp",
            "module": "src/main.ts"
          }
        },
        {
          "kind": "js",
          "name": "coverageDown",
          "declaration": {
            "name": "coverageDown",
            "module": "src/main.ts"
          }
        },
        {
          "kind": "js",
          "name": "runBashCommand",
          "declaration": {
            "name": "runBashCommand",
            "module": "src/main.ts"
          }
        },
        {
          "kind": "js",
          "name": "runCommand",
          "declaration": {
            "name": "runCommand",
            "module": "src/main.ts"
          }
        },
        {
          "kind": "js",
          "name": "buildComment",
          "declaration": {
            "name": "buildComment",
            "module": "src/main.ts"
          }
        },
        {
          "kind": "js",
          "name": "commandComment",
          "declaration": {
            "name": "commandComment",
            "module": "src/main.ts"
          }
        },
        {
          "kind": "js",
          "name": "run",
          "declaration": {
            "name": "run",
            "module": "src/main.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/scripts/analyze.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "eslint",
          "return": {
            "type": {
              "text": "Promise<StepResponse>"
            }
          },
          "parameters": [
            {
              "name": "command",
              "type": {
                "text": "Command"
              },
              "description": "The command to run ESLint."
            }
          ],
          "description": "Executes an ESLint command and processes the output to generate an HTML table of linting issues."
        },
        {
          "kind": "function",
          "name": "litAnalyzer",
          "return": {
            "type": {
              "text": "Promise<StepResponse>"
            }
          },
          "parameters": [
            {
              "name": "command",
              "type": {
                "text": "Command"
              },
              "description": "The command to be executed and analyzed."
            }
          ],
          "description": "Analyzes the output of a given command using the lit-analyzer tool."
        },
        {
          "kind": "function",
          "name": "typeDoc",
          "return": {
            "type": {
              "text": "Promise<StepResponse>"
            }
          },
          "parameters": [
            {
              "name": "command",
              "type": {
                "text": "Command"
              },
              "description": "The command to execute."
            }
          ],
          "description": "Executes a TypeDoc command and processes the output."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "eslint",
          "declaration": {
            "name": "eslint",
            "module": "src/scripts/analyze.ts"
          }
        },
        {
          "kind": "js",
          "name": "litAnalyzer",
          "declaration": {
            "name": "litAnalyzer",
            "module": "src/scripts/analyze.ts"
          }
        },
        {
          "kind": "js",
          "name": "typeDoc",
          "declaration": {
            "name": "typeDoc",
            "module": "src/scripts/analyze.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/scripts/comment.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "comment",
          "return": {
            "type": {
              "text": "Promise<StepResponse>"
            }
          },
          "parameters": [
            {
              "name": "ocotokit",
              "type": {
                "text": "ReturnType<typeof getOctokit>"
              },
              "description": "The Octokit instance for making GitHub API requests."
            },
            {
              "name": "context",
              "type": {
                "text": "Context"
              },
              "description": "The context of the GitHub action, including issue and repository information."
            },
            {
              "name": "cemStr",
              "type": {
                "text": "StepResponse | undefined"
              },
              "description": "The result of the custom element manifest step."
            },
            {
              "name": "eslintStr",
              "type": {
                "text": "StepResponse | undefined"
              },
              "description": "The result of the ESLint step."
            },
            {
              "name": "litAnalyzerStr",
              "type": {
                "text": "StepResponse | undefined"
              },
              "description": "The result of the Lit Analyzer step."
            },
            {
              "name": "prettierStr",
              "type": {
                "text": "StepResponse | undefined"
              },
              "description": "The result of the Prettier formatting step."
            },
            {
              "name": "playwrightStr",
              "type": {
                "text": "StepResponse | undefined"
              },
              "description": "The result of the Playwright testing step."
            },
            {
              "name": "testingStr",
              "type": {
                "text": "StepResponse | undefined"
              },
              "description": "The result of the general testing step."
            },
            {
              "name": "coverageStr",
              "type": {
                "text": "StepResponse | undefined"
              },
              "description": "The result of the code coverage step."
            },
            {
              "name": "typeDocStr",
              "type": {
                "text": "StepResponse | undefined"
              },
              "description": "The result of the TypeDoc documentation generation step."
            },
            {
              "name": "checkModifiedFilesStr",
              "type": {
                "text": "StepResponse | undefined"
              },
              "description": "The result of the check for modified files step."
            },
            {
              "name": "updateChangesStr",
              "type": {
                "text": "StepResponse | undefined"
              },
              "description": "The result of the update changes step."
            }
          ],
          "description": "Posts a comment on a GitHub issue or pull request summarizing the results of various checks.\nIf a comment with the summary already exists, it updates the comment instead."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "comment",
          "declaration": {
            "name": "comment",
            "module": "src/scripts/comment.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/scripts/coverage.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getCoverage",
          "return": {
            "type": {
              "text": "number"
            }
          },
          "parameters": [
            {
              "name": "coveragePath",
              "type": {
                "text": "string"
              },
              "description": "The path to the coverage data file."
            }
          ],
          "description": "Calculates the code coverage percentage from the given coverage data file."
        },
        {
          "kind": "variable",
          "name": "coverage",
          "type": {
            "text": "number"
          },
          "default": "0"
        },
        {
          "kind": "function",
          "name": "coverage",
          "return": {
            "type": {
              "text": "Promise<StepResponse>"
            }
          },
          "parameters": [
            {
              "name": "pastCoverageScore",
              "type": {
                "text": "number | undefined"
              },
              "description": "The coverage score from the previous run. Can be undefined."
            },
            {
              "name": "currentCoverageScore",
              "type": {
                "text": "number | undefined"
              },
              "description": "The coverage score from the current run. Can be undefined."
            },
            {
              "name": "coveragePassScore",
              "type": {
                "text": "string"
              },
              "description": "The minimum coverage percentage required to pass as a string."
            },
            {
              "name": "coveragePath",
              "type": {
                "text": "string"
              },
              "description": "The file path to the coverage data."
            }
          ],
          "description": "Calculates and returns the coverage analysis result based on past and current coverage scores."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getCoverage",
          "declaration": {
            "name": "getCoverage",
            "module": "src/scripts/coverage.ts"
          }
        },
        {
          "kind": "js",
          "name": "coverage",
          "declaration": {
            "name": "coverage",
            "module": "src/scripts/coverage.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/scripts/post.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "checkModifiedFiles",
          "return": {
            "type": {
              "text": "Promise<[StepResponse, boolean]>"
            }
          },
          "parameters": [
            {
              "name": "command",
              "type": {
                "text": "Command"
              },
              "description": "The command to run in the bash shell."
            }
          ],
          "description": "Checks if there are any modified files by running a given bash command."
        },
        {
          "kind": "function",
          "name": "updateChanges",
          "return": {
            "type": {
              "text": "Promise<StepResponse>"
            }
          },
          "parameters": [
            {
              "name": "command",
              "type": {
                "text": "Command"
              },
              "description": "The command object containing a list of commands to execute and a label."
            }
          ],
          "description": "Updates changes by executing a list of commands and building a response comment."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "checkModifiedFiles",
          "declaration": {
            "name": "checkModifiedFiles",
            "module": "src/scripts/post.ts"
          }
        },
        {
          "kind": "js",
          "name": "updateChanges",
          "declaration": {
            "name": "updateChanges",
            "module": "src/scripts/post.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/scripts/testing.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "playwright",
          "return": {
            "type": {
              "text": "Promise<StepResponse>"
            }
          },
          "parameters": [
            {
              "name": "command",
              "type": {
                "text": "Command"
              },
              "description": "The command to be executed."
            }
          ],
          "description": "Executes a Playwright command and sets the Playwright version in the environment variables."
        },
        {
          "kind": "function",
          "name": "testing",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "command",
              "type": {
                "text": "Command"
              },
              "description": "The command to be executed."
            },
            {
              "name": "testResultsPath",
              "type": {
                "text": "string"
              },
              "description": "The file path to the test results."
            }
          ],
          "description": "Executes a given command and processes the test results."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "playwright",
          "declaration": {
            "name": "playwright",
            "module": "src/scripts/testing.ts"
          }
        },
        {
          "kind": "js",
          "name": "testing",
          "declaration": {
            "name": "testing",
            "module": "src/scripts/testing.ts"
          }
        }
      ]
    }
  ]
}
